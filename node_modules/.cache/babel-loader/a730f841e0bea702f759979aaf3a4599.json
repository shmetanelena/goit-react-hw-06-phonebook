{"ast":null,"code":"var _jsxFileName = \"/Users/elenaelenova/Projects/goit-react-hw-06-phonebook/src/components/ContactForm/ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid'; //import PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactForm = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = useRef();\n  const numberInputId = useRef();\n  useEffect(() => {\n    nameInputId.current = nanoid();\n    numberInputId.current = nanoid();\n  }, []);\n\n  const handelSubmit = e => {\n    e.preventDefault();\n\n    if (onSubmit({\n      name,\n      number\n    })) {\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handelSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.box,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.box_name,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: nameInputId.current,\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.input_name,\n            type: \"text\",\n            name: \"name\",\n            pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n            title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            required: true,\n            value: name,\n            onChange: e => setName(e.target.value),\n            id: nameInputId.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: numberInputId.current,\n          children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.input_number,\n            type: \"tel\",\n            name: \"number\",\n            pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n            title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n            required: true,\n            value: number,\n            onChange: e => setNumber(e.target.value),\n            id: numberInputId.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.button,\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactForm, \"mVvV3jCEVQqrRThHXqUmv3zbozY=\");\n\n_c = ContactForm;\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/elenaelenova/Projects/goit-react-hw-06-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["useState","useRef","useEffect","nanoid","styles","ContactForm","name","setName","number","setNumber","nameInputId","numberInputId","current","handelSubmit","e","preventDefault","onSubmit","box","box_name","input_name","target","value","input_number","button","propTypes","PropTypes","func","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMU,WAAW,GAAGT,MAAM,EAA1B;AACA,QAAMU,aAAa,GAAGV,MAAM,EAA5B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACE,OAAZ,GAAsBT,MAAM,EAA5B;AACAQ,IAAAA,aAAa,CAACC,OAAd,GAAwBT,MAAM,EAA9B;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMU,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIC,QAAQ,CAAC;AAAEV,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAD,CAAZ,EAAgC;AAC9BD,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF,GAND;;AAQA,sBACE;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAET,MAAM,CAACa,GAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEb,MAAM,CAACc,QAAvB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAER,WAAW,CAACE,OAA5B;AAAA,0CAEE;AACE,YAAA,SAAS,EAAER,MAAM,CAACe,UADpB;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,OAAO,EAAC,wHAJV;AAKE,YAAA,KAAK,EAAC,wIALR;AAME,YAAA,QAAQ,MANV;AAOE,YAAA,KAAK,EAAEb,IAPT;AAQE,YAAA,QAAQ,EAAEQ,CAAC,IAAIP,OAAO,CAACO,CAAC,CAACM,MAAF,CAASC,KAAV,CARxB;AASE,YAAA,EAAE,EAAEX,WAAW,CAACE;AATlB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE;AAAO,UAAA,OAAO,EAAED,aAAa,CAACC,OAA9B;AAAA,4CAEE;AACE,YAAA,SAAS,EAAER,MAAM,CAACkB,YADpB;AAEE,YAAA,IAAI,EAAC,KAFP;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,OAAO,EAAC,wFAJV;AAKE,YAAA,KAAK,EAAC,8FALR;AAME,YAAA,QAAQ,MANV;AAOE,YAAA,KAAK,EAAEd,MAPT;AAQE,YAAA,QAAQ,EAAEM,CAAC,IAAIL,SAAS,CAACK,CAAC,CAACM,MAAF,CAASC,KAAV,CAR1B;AASE,YAAA,EAAE,EAAEV,aAAa,CAACC;AATpB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAgCE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAER,MAAM,CAACmB,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA3DM;;GAAMlB,W;;KAAAA,W;AA6DbA,WAAW,CAACmB,SAAZ,GAAwB;AACtBR,EAAAA,QAAQ,EAAES,SAAS,CAACC,IAAV,CAAeC;AADH,CAAxB","sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n//import PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = useRef();\n  const numberInputId = useRef();\n\n  useEffect(() => {\n    nameInputId.current = nanoid();\n    numberInputId.current = nanoid();\n  }, []);\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    if (onSubmit({ name, number })) {\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <form onSubmit={handelSubmit}>\n      <div className={styles.box}>\n        <div className={styles.box_name}>\n          <label htmlFor={nameInputId.current}>\n            Name\n            <input\n              className={styles.input_name}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={e => setName(e.target.value)}\n              id={nameInputId.current}\n            />\n          </label>\n\n          <label htmlFor={numberInputId.current}>\n            Number\n            <input\n              className={styles.input_number}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n              id={numberInputId.current}\n            />\n          </label>\n        </div>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}