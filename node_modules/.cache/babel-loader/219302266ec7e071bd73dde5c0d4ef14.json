{"ast":null,"code":"var _jsxFileName = \"/Users/elenaelenova/Projects/goit-react-hw-06-phonebook/src/components/ContactList/ContactList.jsx\",\n    _s = $RefreshSig$();\n\nimport styles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact, delContact, setFilter } from '../redux/contactsSlice'; //import PropTypes from 'prop-types';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  const visibleContacts = useMemo(() => {\n    if (filter.length === 0) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name.toLowerCase().includes(normalizedFilter);\n    });\n  }, [filter, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: styles.contactList,\n    children: visibleContacts.map(_ref2 => {\n      let {\n        id,\n        name,\n        number\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.contactList_item,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [name, \": \", number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => dispatch(delContact(id)),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}; // ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n_s(ContactList, \"vPrEB/RWO5cGXkTUBnDdDeQTt0M=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/elenaelenova/Projects/goit-react-hw-06-phonebook/src/components/ContactList/ContactList.jsx"],"names":["styles","useSelector","useDispatch","addContact","delContact","setFilter","ContactList","dispatch","contacts","state","items","filter","visibleContacts","useMemo","length","normalizedFilter","toLowerCase","name","includes","contactList","map","id","number","contactList_item","button"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,SAAjC,QAAkD,wBAAlD,C,CAEA;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,QAAQ,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,QAAN,CAAeE,KAAzB,CAA5B;AACA,QAAMC,MAAM,GAAGV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,QAAN,CAAeG,MAAzB,CAA1B;AAEA,QAAMC,eAAe,GAAGC,OAAO,CAAC,MAAM;AACpC,QAAIF,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;AACvB,aAAON,QAAP;AACD;;AACD,UAAMO,gBAAgB,GAAGJ,MAAM,CAACK,WAAP,EAAzB;AACA,WAAOR,QAAQ,CAACG,MAAT,CAAgB;AAAA,UAAC;AAAEM,QAAAA;AAAF,OAAD;AAAA,aACrBA,IAAI,CAACD,WAAL,GAAmBE,QAAnB,CAA4BH,gBAA5B,CADqB;AAAA,KAAhB,CAAP;AAGD,GAR8B,EAQ5B,CAACJ,MAAD,EAASH,QAAT,CAR4B,CAA/B;AAUA,sBACE;AAAI,IAAA,SAAS,EAAER,MAAM,CAACmB,WAAtB;AAAA,cACGP,eAAe,CAACQ,GAAhB,CAAoB;AAAA,UAAC;AAAEC,QAAAA,EAAF;AAAMJ,QAAAA,IAAN;AAAYK,QAAAA;AAAZ,OAAD;AAAA,0BACnB;AAAa,QAAA,SAAS,EAAEtB,MAAM,CAACuB,gBAA/B;AAAA,gCACE;AAAA,qBACGN,IADH,QACWK,MADX;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AACE,UAAA,SAAS,EAAEtB,MAAM,CAACwB,MADpB;AAEE,UAAA,OAAO,EAAE,MAAMjB,QAAQ,CAACH,UAAU,CAACiB,EAAD,CAAX,CAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA,SAASA,EAAT;AAAA;AAAA;AAAA;AAAA,cADmB;AAAA,KAApB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhCM,C,CAkCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA3Caf,W;UACMJ,W,EACAD,W,EACFA,W;;;KAHJK,W","sourcesContent":["import styles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact, delContact, setFilter } from '../redux/contactsSlice';\n\n//import PropTypes from 'prop-types';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n\n  const visibleContacts = useMemo(() => {\n    if (filter.length === 0) {\n      return contacts;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }, [filter, contacts]);\n\n  return (\n    <ul className={styles.contactList}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.contactList_item}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            className={styles.button}\n            onClick={() => dispatch(delContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}